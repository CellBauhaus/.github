name: Reusable-CI-python
on:
  workflow_call:
    inputs:
      cache-dir:
        description: 'A subdirectory of .cache to cache'
        required: false
        type: string
      src-dir:
        description: 'The directory containing the python source code'
        required: false
        default: "src"
        type: string

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: pytest ${{ matrix.os }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions: {actions: write, contents: read}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
        with: {lfs: 'true'}
      - name: Cache ${{ inputs.cache-dir }}
        id: cache
        if: inputs.cache-dir
        uses: actions/cache@v4
        with:
          path: '/home/runner/.cache/${{ inputs.cache-dir }}'
          key: ${{ runner.os }}-${{ inputs.cache-dir }}
      - uses:  CellBauhaus/.github/.github/actions/setup-cbh-pixi@main
        with:
          auth-token: ${{ secrets.PREFIX_API_KEY }}
      - run: pixi run -e test-published pytest tests/
  lint:
    name: lint - ${{ github.event_name }}
    runs-on: ubuntu-latest
    strategy: {fail-fast: false}
    steps:
      - uses: actions/checkout@v4
        with: {lfs: 'true'}
      - uses:  CellBauhaus/.github/.github/actions/setup-cbh-pixi@main
        with:
          auth-token: ${{ secrets.PREFIX_API_KEY }}
      - run: pixi run -e test-published ruff check ${{ inputs.src-dir }}
  typecheck:
    name: typecheck - ${{ github.event_name }}
    runs-on: ubuntu-latest
    strategy: {fail-fast: false}
    steps:
      - uses: actions/checkout@v4
        with: {lfs: 'true'}
      - uses:  CellBauhaus/.github/.github/actions/setup-cbh-pixi@main
        with:
          auth-token: ${{ secrets.PREFIX_API_KEY }}
      - run: pixi run -e test-published mypy ${{ inputs.src-dir }}
  notify:
    name: slack notification - ${{ github.event_name }}
    runs-on: ubuntu-latest
    needs: [test, lint, typecheck]
    # This only runs if above failed and we are running a scheduled job (which implies also are on main branch)
    if: ${{ failure() && github.event_name == 'schedule' }}
    steps:
    - uses: actions/checkout@v4
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: failure
        SLACK_USERNAME: "Nightly CI"
        SLACKIFY_MARKDOWN: true
        SLACK_MESSAGE: "[${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})\n
          test: _${{ needs.test.result }}_,
          lint: _${{ needs.lint.result }}_,
          typecheck: _${{ needs.typecheck.result }}_,
        "
        SLACK_ICON_EMOJI: ":sleeping:"
        SLACK_FOOTER: ""
        MSG_MINIMAL: true
        SLACK_TITLE: "CI Failure"
        ENABLE_ESCAPES: true
